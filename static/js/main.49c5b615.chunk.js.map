{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","toLocaleLowerCase","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yUAEaA,EAAO,SAAAC,GAAK,OAEzB,sBAAKC,UAAU,iBAAf,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA4BH,EAAMI,QAAQC,GAA1C,4BAC1B,mCAAML,EAAMI,QAAQE,QACpB,6BAAKN,EAAMI,QAAQG,YCJNC,EAAW,SAAAR,GACxB,OAAQ,qBAAKC,UAAU,YAAf,SACHD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OAC3B,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCHVM,G,MAAU,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAYC,EAAd,EAAcA,aAAd,OACvB,uBACIZ,UAAU,SACVa,KAAM,SACNF,YAAaA,EACbG,SAAUF,MCiCCG,E,kDAnCb,aACC,IAAD,8BACE,gBAaFH,aAAe,SAAAI,GACb,EAAKC,SAAS,CAACC,YAAYF,EAAEG,OAAOC,SAbpC,EAAKC,MAAM,CACTb,SAAS,GACTU,YAAY,IAJhB,E,qDAQA,WAAoB,IAAD,OACjBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UACxBF,MAAK,SAAAG,GAAK,OAAE,EAAKT,SAAS,CAACT,SAASkB,S,oBAOrC,WACE,MAA8BC,KAAKN,MAA5Bb,EAAP,EAAOA,SAAUU,EAAjB,EAAiBA,YACXU,EAAiBpB,EAASqB,QAAO,SAAA1B,GAAO,OAC5CA,EAAQE,KAAKyB,cAAcC,SAASb,EAAYc,wBAClD,OACE,sBAAKhC,UAAU,MAAf,UACE,oBAAIA,UAAU,QAAd,8BACA,cAAC,EAAD,CACGW,YAAY,kBACbC,aAAce,KAAKf,eACrB,cAAC,EAAD,CAAUJ,SAAUoB,W,GA/BZK,aCQHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.49c5b615.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './card.styles.css';\r\nexport const Card = props =>\r\n(\r\n<div className='card-container'>\r\n    <img alt=\"monster\" src = {`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}/>\r\n<h1> {props.monster.name}</h1>\r\n<h2>{props.monster.email}</h2>\r\n</div>\r\n);","import React from 'react';\r\nimport './card-list.styles.css';\r\nimport {Card} from '../card/card.component'\r\nexport const CardList = props => {\r\nreturn (<div className=\"card-list\">            \r\n    {props.monsters.map(monster=>(\r\n    <Card key={monster.id} monster={monster}/>\r\n      ))}\r\n    </div>);\r\n}","import React from \"react\";\r\nimport \"./search-box.styles.css\";\r\n\r\nexport const SearchBox=({placeholder,handleChange})=>(\r\n<input \r\n    className='search'\r\n    type ='search' \r\n    placeholder={placeholder}\r\n    onChange={handleChange}\r\n/>\r\n);","import './App.css';\nimport React, {Component} from 'react';\nimport {CardList} from './components/card-list/card-list.component';\nimport {SearchBox} from \"./components/search-box/search-box.component\";\nclass App extends Component\n{\n  constructor()\n  {\n    super();\n    this.state={     \n      monsters:[],\n      searchField:''\n    }\n  }\n\n  componentDidMount(){\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n    .then(response=>response.json())\n    .then(users=>this.setState({monsters:users}));\n  }\n\n  handleChange = e =>{\n    this.setState({searchField:e.target.value});\n  }\n\n    render() {\n      const {monsters, searchField}=this.state;\n      const filteredMonsters=monsters.filter(monster=>\n        monster.name.toLowerCase().includes(searchField.toLocaleLowerCase()))\n      return (\n        <div className=\"App\">\n          <h1 className=\"title\">Monsters Rolodex</h1>\n          <SearchBox \n             placeholder='search monsters'\n            handleChange={this.handleChange}/>\n          <CardList monsters={filteredMonsters}/>\n        </div>\n      );\n    }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}